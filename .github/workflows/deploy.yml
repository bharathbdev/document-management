name: Deploy Node.js API

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run manually'
        required: true
        type: choice
        options:
          - build-docker
          - deploy-ec2

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

  build-docker:
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'build-docker'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t bharath7898/document-management:v1.0.0 .
          docker push bharath7898/document-management:v1.0.0

  deploy-ec2:
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'deploy-ec2'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            sudo apt-get update -y
            sudo apt-get install docker.io -y
            sudo systemctl start docker
            sudo usermod -aG docker $EC2_USER
            sudo systemctl enable docker
          EOF

      - name: Restart SSH Session and Deploy
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            docker pull your-dockerhub-username/document-management:v1.0.0
            docker stop document-management || true
            docker rm document-management || true
            docker stop library-db || true
            docker rm library-db || true
            docker network create document-network || true
            docker run -d --name library-db --network document-network -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:13.1-alpine
            docker run -d --name document-management --network document-network -p 8080:8080 -e DATABASE_HOST=library-db -e DATABASE_PORT=5432 -e DATABASE_USERNAME=postgres -e DATABASE_PASSWORD=postgres bharath7898/document-management:v1.0.0
          EOF